#include <iostream>
#include <vector>
#include <ctime>

class Matrix {
private:
    std::vector<std::vector<int>> data;
    unsigned int m;
    unsigned int n;

public:
    Matrix(unsigned int rows, unsigned int cols) : m(rows), n(cols) {
        data.resize(m, std::vector<int>(n, 0));
    }

    ~Matrix() {}

    int& operator()(unsigned int row, unsigned int col) {
        return data[row][col];
    }

    void fillRandom() {
        srand(time(0));
        for (unsigned int i = 0; i < m; i++) {
            for (unsigned int j = 0; j < n; j++) {
                data[i][j] = rand() % 10;
            }
        }
    }

    friend std::ostream& operator<<(std::ostream& os, const Matrix& mat) {
        for (unsigned int i = 0; i < mat.m; i++) {
            for (unsigned int j = 0; j < mat.n; j++) {
                os << mat.data[i][j] << " ";
            }
            os << "\n";
        }
        return os;
    }

    Matrix& operator+=(const Matrix& other) {
        for (unsigned int i = 0; i < m; i++) {
            for (unsigned int j = 0; j < n; j++) {
                data[i][j] += other.data[i][j];
            }
        }
        return *this;
    }

    Matrix operator+(const Matrix& other) {
        Matrix result(m, n);
        for (unsigned int i = 0; i < m; i++) {
            for (unsigned int j = 0; j < n; j++) {
                result.data[i][j] = data[i][j] + other.data[i][j];
            }
        }
        return result;
    }

    bool operator!=(const Matrix& other) const {
        return data != other.data;
    }

    bool operator==(const Matrix& other) const {
        return data == other.data;
    }
};

int main() {
    Matrix mat1(2, 2);
    Matrix mat2(2, 2);
    
    mat1.fillRandom();
    mat2.fillRandom();
    
    std::cout << "Matrix 1:\n" << mat1 << "\n";
    std::cout << "Matrix 2:\n" << mat2 << "\n";
    
    Matrix result = mat1 + mat2;
    std::cout << "Result of addition:\n" << result << "\n";
    
    return 0;
}
